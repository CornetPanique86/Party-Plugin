"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.bedwarsstart = void 0;
const launcher_1 = require("bdsx/launcher");
const __1 = require("..");
const utils_1 = require("./utils");
const _1 = require(".");
const enchants_1 = require("bdsx/bds/enchants");
const nbt_1 = require("bdsx/bds/nbt");
const event_1 = require("bdsx/event");
const common_1 = require("bdsx/common");
const blockpos_1 = require("bdsx/bds/blockpos");
const actor_1 = require("bdsx/bds/actor");
const blockSource = (_a = launcher_1.bedrockServer.level.getDimension(actor_1.DimensionId.Overworld)) === null || _a === void 0 ? void 0 : _a.getBlockSource();
// /bedwarsstart command
async function bedwarsstart(param, origin, output) {
    var _a;
    // /bedwarsstart stop
    if (param.option === "stop") {
        stopGen();
        (0, utils_1.stopGame)();
        return;
    }
    // /bedwarsstart start
    if (launcher_1.bedrockServer.level.getActivePlayerCount() <= 1) {
        ((_a = origin.getEntity()) === null || _a === void 0 ? void 0 : _a.isPlayer()) ? launcher_1.bedrockServer.executeCommand(`tellraw "${origin.getName()}" ${(0, __1.rawtext)("Minimum 2 players to start", __1.LogInfo.error)}`)
            : output.error("Min 2 players to start");
        return;
    }
    try {
        const participants = await (0, utils_1.startGame)(_1.Games.bedwars, launcher_1.bedrockServer.level.getPlayers(), 15);
        if (participants !== null)
            setup(participants);
    }
    catch (err) {
        launcher_1.bedrockServer.executeCommand(`tellraw @a ${(0, __1.rawtext)("Error while starting bedwars", __1.LogInfo.error)}`);
        console.log(err);
        return;
    }
}
exports.bedwarsstart = bedwarsstart;
const teams = [{ bed: true, pls: [] },
    { bed: true, pls: [] },
    { bed: true, pls: [] },
    { bed: true, pls: [] }];
const teamNames = ["§cRed", "§9Blue", "§2Green", "§6Yellow"];
function setup(pls) {
    const teamColors = [-54000, 66000, 64000, -67000];
    console.log("setup() participants:\n" + pls + "\n");
    launcher_1.bedrockServer.executeCommand("tag @a remove bedwars");
    let teamCounter = 0;
    pls.forEach(pl => {
        launcher_1.bedrockServer.executeCommand(`tag "${pl}" add bedwars`);
        // Put in team
        teams[teamCounter].pls.push(pl);
        teamCounter === 5 ? teamCounter = 0 : teamCounter++;
    });
    // TP Teams
    teams[0].pls.forEach(pl => {
        launcher_1.bedrockServer.executeCommand(`tp "${pl}" -1001 68 -1035`);
        launcher_1.bedrockServer.executeCommand(`spawnpoint "${pl}" -1001 68 -1035`);
    });
    teams[1].pls.forEach(pl => {
        launcher_1.bedrockServer.executeCommand(`tp "${pl}" -1000 68 -965`);
        launcher_1.bedrockServer.executeCommand(`spawnpoint "${pl}" -1000 68 -965`);
    });
    teams[2].pls.forEach(pl => {
        launcher_1.bedrockServer.executeCommand(`tp "${pl}" -966 68 -1000`);
        launcher_1.bedrockServer.executeCommand(`spawnpoint "${pl}" -966 68 -1000`);
    });
    teams[3].pls.forEach(pl => {
        launcher_1.bedrockServer.executeCommand(`tp "${pl}" -1034 68 -1000`);
        launcher_1.bedrockServer.executeCommand(`spawnpoint "${pl}" -1034 68 -1000`);
    });
    launcher_1.bedrockServer.executeCommand("clear @a[tag=bedwars]");
    launcher_1.bedrockServer.executeCommand("effect @a[tag=bedwars] clear");
    launcher_1.bedrockServer.executeCommand("kill @e[type=item]");
    launcher_1.bedrockServer.executeCommand("inputpermission set @a[tag=bedwars] movement disabled");
    teams.forEach((team, index) => {
        const armorNames = ["minecraft:leather_helmet", "minecraft:leather_chestplate", "minecraft:leather_leggings", "minecraft:leather_boots"];
        const armor = [];
        for (let i = 0; i < 4; i++) {
            const item = (0, utils_1.createCItemStack)({
                item: armorNames[i],
                amount: 1,
                data: 0,
                name: `§r${teamNames[index]} team`,
                enchantment: {
                    enchant: enchants_1.EnchantmentNames.Unbreaking,
                    level: 5,
                    isUnsafe: true
                }
            });
            const tag = item.save();
            const nbt = nbt_1.NBT.allocate(Object.assign(Object.assign({}, tag), { tag: Object.assign(Object.assign({}, tag.tag), { "customColor": nbt_1.NBT.int(teamColors[index]), "minecraft:item_lock": nbt_1.NBT.byte(2), "minecraft:keep_on_death": nbt_1.NBT.byte(1) }) }));
            item.load(nbt);
            armor.push(item);
        }
        team.pls.forEach(plName => {
            const player = (0, utils_1.getPlayerByName)(plName);
            if (!player)
                return;
            player.setArmor(0, armor[0]);
            player.setArmor(1, armor[1]);
            player.setArmor(2, armor[2]);
            player.setArmor(3, armor[3]);
        });
    });
    (0, utils_1.countdownActionbar)(5, pls)
        .then(() => {
        // Clear/reset map
        launcher_1.bedrockServer.executeCommand("clone 116 20 112 116 20 113 -1000 68 -968"); // blue bed
        launcher_1.bedrockServer.executeCommand("clone 115 20 111 114 20 111 -1031 68 -1000"); // yellow bed
        launcher_1.bedrockServer.executeCommand("clone 116 20 110 116 20 109 -1001 68 -1032"); // red bed
        launcher_1.bedrockServer.executeCommand("clone 117 20 111 118 20 111 -969 68 -1000"); // lime bed
        launcher_1.bedrockServer.executeCommand("inputpermission set @a[tag=bedwars] movement enabled");
        gen();
        startListeners();
        return;
    })
        .catch(error => {
        console.error(error.message);
        return;
    });
}
// IRON INGOTS
// RED: -1001 68 -1038
// BLUE: -1000 68 -962
// GREEN: -963 68 -1000
// YELLOW: -1037 68 -1000
// EMERALDS
// -1001 70 -1008
// -1007 70 -1000
// -993 70 -1001
// -1000 70 -993
// 1 iron/s ; 1 diamond/10s
let genInterval;
const iron_ingot = (0, utils_1.createCItemStack)({ item: "minecraft:iron_ingot", amount: 1, data: 0 }), emerald = (0, utils_1.createCItemStack)({ item: "minecraft:emerald", amount: 1, data: 0 });
function gen() {
    const ironSpawns = [[-1001, 68, -1038], [-1000, 68, -962], [-963, 68, -1000], [-1037, 68, -1000]], emeraldSpawns = [[-1001, 70, -1008], [-1007, 70, -1000], [-993, 70, -1001], [-1000, 70, -993]];
    if (!blockSource)
        return;
    let sec = 1;
    genInterval = setInterval(() => {
        for (let i = 0; i < 4; i++) {
            launcher_1.bedrockServer.level.getSpawner().spawnItem(blockSource, iron_ingot, blockpos_1.Vec3.create(ironSpawns[i][0], ironSpawns[i][1], ironSpawns[i][2]), 1);
        }
        if (sec === 10) {
            for (let i = 0; i < 4; i++) {
                launcher_1.bedrockServer.level.getSpawner().spawnItem(blockSource, emerald, blockpos_1.Vec3.create(emeraldSpawns[i][0], emeraldSpawns[i][1], emeraldSpawns[i][2]), 1);
            }
            sec = 0;
        }
        sec++;
    }, 1000);
}
function stopGen() {
    clearInterval(genInterval);
}
function eliminate(pl) {
    return;
}
function respawn(pl) {
    return;
}
function bedBreak(pl, team) {
    return;
}
function end() {
    return;
}
// -------------
//   LISTENERS
// -------------
const playerRespawnLis = (e) => {
    if (!e.player.hasTag("bedwars"))
        return;
    const pl = e.player.getNameTag();
    let isPlEliminated = false;
    teams.forEach(team => {
        if (team.pls.includes(pl) && !team.bed) {
            isPlEliminated = true;
            eliminate(pl);
        }
    });
    if (!isPlEliminated)
        respawn(pl);
};
const blockDestroyLis = (e) => {
    // BEDS data: red=14 ; blue=11 ; green=5 ; yellow=4
    if (!(e.player.hasTag("bedwars") && e.itemStack.getName() === "minecraft:bed"))
        return;
    let bed;
    // Check if bed color is of a team and give the correct team index
    switch (e.itemStack.getId()) {
        case 14:
            bed = 0;
            break;
        case 11:
            bed = 1;
            break;
        case 5:
            bed = 2;
            break;
        case 4:
            bed = 3;
            break;
        default:
            return;
    }
    const pl = e.player.getNameTag();
    // Get player's team otherwise eliminate (just in case)
    let plTeam = -1;
    teams.forEach((team, index) => { if (team.pls.includes(pl))
        plTeam = index; });
    if (plTeam === -1) {
        eliminate(pl);
        return;
    }
    ;
    // If player breaks his own bed
    if (bed === plTeam) {
        launcher_1.bedrockServer.executeCommand(`tellraw "${pl}" ${(0, __1.rawtext)("You can't break your own bed! (u stoopid or what?)", __1.LogInfo.error)}`);
        return common_1.CANCEL;
    }
    // Team's bed was broken
    bedBreak(pl, bed);
    return;
};
const playerInventoryChangeLis = (e) => {
    if (!e.player.hasTag("bedwars"))
        return;
    const item = e.newItemStack;
    const pl = e.player;
    // Clear beds
    if (item.getName() === "minecraft:bed") {
        const inv = pl.getInventory();
        const bed = (0, utils_1.createCItemStack)({ item: "minecraft:bed", amount: 1 });
        inv.removeResource(bed);
        bed.destruct();
        pl.sendInventory();
        return;
    }
    // Replace armor
    const armorNames = ["_chestplate", "_leggings", "_boots"];
    if (item.getName() === "minecraft:diamond_chestplate") {
        const armor = [];
        for (let i = 0; i < 4; i++) {
            const item = (0, utils_1.createCItemStack)({
                item: "minecraft:diamond" + armorNames[i],
                amount: 1
            });
            armor.push(item);
        }
        armor.forEach((armorItem, index) => pl.setArmor(index + 1, armorItem));
        const inv = pl.getInventory();
        const diamond_chestplate = (0, utils_1.createCItemStack)({ item: "minecraft:diamond_chestplate" });
        inv.removeResource(diamond_chestplate);
        diamond_chestplate.destruct();
        pl.sendInventory();
        return;
    }
    if (item.getName() === "minecraft:iron_chestplate") {
        const armor = [];
        for (let i = 0; i < 4; i++) {
            const item = (0, utils_1.createCItemStack)({
                item: "minecraft:iron" + armorNames[i],
                amount: 1
            });
            armor.push(item);
        }
        armor.forEach((armorItem, index) => pl.setArmor(index + 1, armorItem));
        const inv = pl.getInventory();
        const iron_chestplate = (0, utils_1.createCItemStack)({ item: "minecraft:iron_chestplate" });
        inv.removeResource(iron_chestplate);
        iron_chestplate.destruct();
        pl.sendInventory();
        return;
    }
};
function startListeners() {
    event_1.events.playerRespawn.on(playerRespawnLis);
    event_1.events.blockDestroy.on(blockDestroyLis);
    event_1.events.playerInventoryChange.on(playerInventoryChangeLis);
}
event_1.events.serverClose.on(() => {
    stopGen();
    iron_ingot.destruct();
    emerald.destruct();
});
//# sourceMappingURL=data:application/json;base64,